{
    "swagger": "2.0",
    "info": {
        "description": "This is a Swagger for a Node.js Api about superheroes",
        "version": "1.0.0",
        "title": "Swagger MyHero",
        "contact": {
            "email": "m.mercedes.perea@gmail.com"
        }
    },
    "host": "localhost:5000",
    "basePath": "/api",
    "tags": [
        {
            "name": "user",
            "description": "Operations about user"
        },
        {
            "name": "auth",
            "description": "Access to App"
        },
        {
            "name": "apiHero",
            "description": "Operations in the apihero Api"
        },
        {
            "name": "hero",
            "description": "Operations about Heros"
        },
        {
            "name": "userHero",
            "description": "Operations about the relathionship User/heroes"
        },
        {
            "name": "team",
            "description": "Operations about teams"
        }
    ],
    "schemes": [
        "https",
        "http"
    ],
    "paths": {
        "/hero/{idHero}": {
            "get": {
                "tags": [
                    "hero"
                ],
                "summary": "Bring a Hero by id",
                "description": "Bring all the information about a Hero",
                "operationId": "GetHero",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "idHero",
                        "description": "id of the hero",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Hero"
                        }
                    },
                    "400": {
                        "description": "Id must be sent"
                    }
                }
            }
        },
        "/hero/stats/mostIntelligence": {
            "get": {
                "tags": [
                    "hero"
                ],
                "summary": "Bring the hero most intelligent",
                "description": "Bring the hero most intelligent",
                "operationId": "GetHeroIntelligent",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Hero"
                        }
                    },
                    "400": {
                        "description": "There is no heros"
                    }
                }
            }
        },
        "/hero/stats/mostStrength": {
            "get": {
                "tags": [
                    "hero"
                ],
                "summary": "Bring the hero mostStrength",
                "description": "Bring the hero mostStrength",
                "operationId": "GetmostStrength",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Hero"
                        }
                    },
                    "400": {
                        "description": "There is no heros"
                    }
                }
            }
        },
        "/hero/stats/mostSpeed": {
            "get": {
                "tags": [
                    "hero"
                ],
                "summary": "Bring the hero mostSpeed",
                "description": "Bring the hero mostSpeed",
                "operationId": "GetHeromostSpeed",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Hero"
                        }
                    },
                    "400": {
                        "description": "There is no heros"
                    }
                }
            }
        },
        "/hero/stats/mostDurability": {
            "get": {
                "tags": [
                    "hero"
                ],
                "summary": "Bring the hero mostDurability",
                "description": "Bring the hero mostDurability",
                "operationId": "GetHeromostDurability",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Hero"
                        }
                    },
                    "400": {
                        "description": "There is no heros"
                    }
                }
            }
        },
        "/hero/stats/mostPower": {
            "get": {
                "tags": [
                    "hero"
                ],
                "summary": "Bring the hero mostPower",
                "description": "Bring the hero mostPower",
                "operationId": "GetHeromostPower",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Hero"
                        }
                    },
                    "400": {
                        "description": "There is no heros"
                    }
                }
            }
        },
        "/hero/stats/mostCombat": {
            "get": {
                "tags": [
                    "hero"
                ],
                "summary": "Bring the hero mostCombat",
                "description": "Bring the hero mostCombat",
                "operationId": "GetHeromostCombat",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Hero"
                        }
                    },
                    "400": {
                        "description": "There is no heros"
                    }
                }
            }
        },
        "/hero/new/heros": {
            "get": {
                "tags": [
                    "hero"
                ],
                "summary": "Bring the last heroes in the app",
                "description": "Bring the last heroes in the app",
                "operationId": "GetlastHeroes",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Hero"
                            }
                        }
                    },
                    "400": {
                        "description": "There is no heros"
                    }
                }
            }
        },
        "/hero/all/MarvelHeroes": {
            "get": {
                "tags": [
                    "hero"
                ],
                "summary": "Bring all MarvelHeroes",
                "description": "Bring all MarvelHeroess in the app",
                "operationId": "allMarvelHeroes",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Hero"
                            }
                        }
                    },
                    "400": {
                        "description": "There is no heros"
                    }
                }
            }
        },
        "/hero/all/DCHeroes": {
            "get": {
                "tags": [
                    "hero"
                ],
                "summary": "Bring all DCHeroes in the app",
                "description": "Bring all DCHeroes in the app",
                "operationId": "allDCHeroes",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Hero"
                            }
                        }
                    },
                    "400": {
                        "description": "There is no heros"
                    }
                }
            }
        },
        "/hero/img/profileImgHeroes": {
            "get": {
                "tags": [
                    "hero"
                ],
                "summary": "Bring profile avatar in the app",
                "description": "Bring profile avatar in the app",
                "operationId": "profileAvatar",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array"
                        }
                    },
                    "400": {
                        "description": "There is no heros"
                    }
                }
            }
        },
        "/userHero/allHerosFav/{idUsu}": {
            "get": {
                "tags": [
                    "userHero"
                ],
                "summary": "Bring all favorites heroes from the user",
                "description": "Bring all favorites heroes from the user",
                "operationId": "getFav",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "idUsu",
                        "description": "id of the User",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Hero"
                        }
                    },
                    "400": {
                        "description": "Id must be sent"
                    }
                }
            }
        },
        "/userHero/allHerosFoll/{idUsu}": {
            "get": {
                "tags": [
                    "userHero"
                ],
                "summary": "Bring all follow heroes from the user",
                "description": "Bring all follow heroes from the user",
                "operationId": "getFoll",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "idUsu",
                        "description": "id of the User",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Hero"
                        }
                    },
                    "400": {
                        "description": "Id must be sent"
                    }
                }
            }
        },
        "/userHero/bestMarverHero": {
            "get": {
                "tags": [
                    "userHero"
                ],
                "summary": "Bring the best Marvel Heroe",
                "description": "Bring the marvel hero with more votes ",
                "operationId": "bestMarverHero",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Hero"
                            }
                        }
                    },
                    "400": {
                        "description": "There is no heros"
                    }
                }
            }
        },
        "/userHero/bestDCHero": {
            "get": {
                "tags": [
                    "userHero"
                ],
                "summary": "Bring the best DC Heroe",
                "description": "Bring the DC hero with more votes ",
                "operationId": "bestDCHero",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Hero"
                            }
                        }
                    },
                    "400": {
                        "description": "There is no heros"
                    }
                }
            }
        },
        "/userHero/mostFollowHeros": {
            "get": {
                "tags": [
                    "userHero"
                ],
                "summary": "Bring heroes with more followers",
                "description": "Bring heroes with more followers",
                "operationId": "mostFollowHeros",
                "produces": [
                    "application/json"
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Hero"
                            }
                        }
                    },
                    "400": {
                        "description": "There is no heros"
                    }
                }
            }
        },
        "/userHero/getHeroUsu/{idUsu}/{idHero}": {
            "get": {
                "tags": [
                    "userHero"
                ],
                "summary": "Get the relationship of the hero and the user",
                "description": "Get the relationship of the hero and the user",
                "operationId": "getHeroUsu",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "idUsu",
                        "description": "id of the User",
                        "required": true,
                        "type": "number"
                    },
                    {
                        "in": "path",
                        "name": "idHero",
                        "description": "id of the Hero",
                        "required": true,
                        "type": "number"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/userHero"
                        }
                    },
                    "400": {
                        "description": "Ids must be sent"
                    }
                }
            }
        },
        "/userHero/getHeroComments/{idHero}": {
            "get": {
                "tags": [
                    "userHero"
                ],
                "summary": "Get all the comments from a hero",
                "description": "Get all the comments from a hero",
                "operationId": "getHeroComments",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "idHero",
                        "description": "id of the User",
                        "required": true,
                        "type": "number"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Ids must be sent"
                    }
                }
            }
        },
        "/userHero/followHero": {
            "put": {
                "tags": [
                    "userHero"
                ],
                "summary": "Follow a hero",
                "description": "Follow a hero",
                "operationId": "followHero",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Follow a hero",
                        "required": [
                            "idUsu",
                            "idHero"
                        ],
                        "properties": {
                            "idUsu": {
                                "type": "number",
                                "desciption": "id User"
                            },
                            "idHero": {
                                "type": "number",
                                "desciption": "id Hero"
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "ids must be sent"
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            }
        },
        "/userHero/unfollowHero": {
            "put": {
                "tags": [
                    "userHero"
                ],
                "summary": "Unfollow a hero",
                "description": "Unfollow a hero",
                "operationId": "unfollowHero",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Unfollow a hero",
                        "required": [
                            "idUsu",
                            "idHero"
                        ],
                        "properties": {
                            "idUsu": {
                                "type": "number",
                                "desciption": "id User"
                            },
                            "idHero": {
                                "type": "number",
                                "desciption": "id Hero"
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "ids must be sent"
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            }
        },
        "/userHero/favorite": {
            "put": {
                "tags": [
                    "userHero"
                ],
                "summary": "favorite a hero",
                "description": "favorite a hero",
                "operationId": "favorite",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "favorite a hero",
                        "required": [
                            "idUsu",
                            "idHero"
                        ],
                        "properties": {
                            "idUsu": {
                                "type": "number",
                                "desciption": "id User"
                            },
                            "idHero": {
                                "type": "number",
                                "desciption": "id Hero"
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "ids must be sent"
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            }
        },
        "/userHero/unfavorite": {
            "put": {
                "tags": [
                    "userHero"
                ],
                "summary": "unfavorite a hero",
                "description": "unfavorite a hero",
                "operationId": "unfavorite",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "unfavorite a hero",
                        "required": [
                            "idUsu",
                            "idHero"
                        ],
                        "properties": {
                            "idUsu": {
                                "type": "number",
                                "desciption": "id User"
                            },
                            "idHero": {
                                "type": "number",
                                "desciption": "id Hero"
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "ids must be sent"
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            }
        },
        "/userHero/voteHero": {
            "put": {
                "tags": [
                    "userHero"
                ],
                "summary": "Vote a hero",
                "description": "Vote a hero",
                "operationId": "voteHero",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Vote a hero",
                        "required": [
                            "idUsu",
                            "idHero",
                            "score"
                        ],
                        "properties": {
                            "idUsu": {
                                "type": "number",
                                "desciption": "id User"
                            },
                            "idHero": {
                                "type": "number",
                                "desciption": "id Hero"
                            },
                            "score": {
                                "type": "number",
                                "desciption": "score"
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "ids must be sent"
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            }
        },
        "/userHero/commentHero": {
            "put": {
                "tags": [
                    "userHero"
                ],
                "summary": "comment a hero",
                "description": "comment a hero",
                "operationId": "commentHero",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "comment a hero",
                        "required": [
                            "idUsu",
                            "idHero",
                            "comment"
                        ],
                        "properties": {
                            "idUsu": {
                                "type": "number",
                                "desciption": "id User"
                            },
                            "idHero": {
                                "type": "number",
                                "desciption": "id Hero"
                            },
                            "comment": {
                                "type": "string",
                                "desciption": "comment"
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "ids must be sent"
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            }
        },
        "/userHero/deleteCHero": {
            "put": {
                "tags": [
                    "userHero"
                ],
                "summary": "Delete comment a hero",
                "description": "Delete comment a hero",
                "operationId": "deleteCHero",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Delete comment a hero",
                        "required": [
                            "idUsu",
                            "idHero"
                        ],
                        "properties": {
                            "idUsu": {
                                "type": "number",
                                "desciption": "id User"
                            },
                            "idHero": {
                                "type": "number",
                                "desciption": "id Hero"
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "successful operation"
                    },
                    "400": {
                        "description": "ids must be sent"
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            }
        },





















        "/pet/findByStatus": {
            "get": {
                "tags": [
                    "pet"
                ],
                "summary": "Finds Pets by status",
                "description": "Multiple status values can be provided with comma separated strings",
                "operationId": "findPetsByStatus",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Status values that need to be considered for filter",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "available",
                                "pending",
                                "sold"
                            ],
                            "default": "available"
                        },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Pet"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ]
            }
        },
        "/pet/findByTags": {
            "get": {
                "tags": [
                    "pet"
                ],
                "summary": "Finds Pets by tags",
                "description": "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing.",
                "operationId": "findPetsByTags",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tags",
                        "in": "query",
                        "description": "Tags to filter by",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "multi"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Pet"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid tag value"
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ],
                "deprecated": true
            }
        },
        "/pet/{petId}": {
            "get": {
                "tags": [
                    "pet"
                ],
                "summary": "Find pet by ID",
                "description": "Returns a single pet",
                "operationId": "getPetById",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "petId",
                        "in": "path",
                        "description": "ID of pet to return",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Pet"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Pet not found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "pet"
                ],
                "summary": "Updates a pet in the store with form data",
                "description": "",
                "operationId": "updatePetWithForm",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "petId",
                        "in": "path",
                        "description": "ID of pet that needs to be updated",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "name",
                        "in": "formData",
                        "description": "Updated name of the pet",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "status",
                        "in": "formData",
                        "description": "Updated status of the pet",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ]
            },
            "delete": {
                "tags": [
                    "pet"
                ],
                "summary": "Deletes a pet",
                "description": "",
                "operationId": "deletePet",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "api_key",
                        "in": "header",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "petId",
                        "in": "path",
                        "description": "Pet id to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Pet not found"
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ]
            }
        },
        "/pet/{petId}/uploadImage": {
            "post": {
                "tags": [
                    "pet"
                ],
                "summary": "uploads an image",
                "description": "",
                "operationId": "uploadFile",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "petId",
                        "in": "path",
                        "description": "ID of pet to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "additionalMetadata",
                        "in": "formData",
                        "description": "Additional data to pass to server",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "file",
                        "in": "formData",
                        "description": "file to upload",
                        "required": false,
                        "type": "file"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ]
            }
        },
        "/store/inventory": {
            "get": {
                "tags": [
                    "store"
                ],
                "summary": "Returns pet inventories by status",
                "description": "Returns a map of status codes to quantities",
                "operationId": "getInventory",
                "produces": [
                    "application/json"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "integer",
                                "format": "int32"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/store/order": {
            "post": {
                "tags": [
                    "store"
                ],
                "summary": "Place an order for a pet",
                "description": "",
                "operationId": "placeOrder",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "order placed for purchasing the pet",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Order"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Order"
                        }
                    },
                    "400": {
                        "description": "Invalid Order"
                    }
                }
            }
        },
        "/store/order/{orderId}": {
            "get": {
                "tags": [
                    "store"
                ],
                "summary": "Find purchase order by ID",
                "description": "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions",
                "operationId": "getOrderById",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "path",
                        "description": "ID of pet that needs to be fetched",
                        "required": true,
                        "type": "integer",
                        "maximum": 10,
                        "minimum": 1,
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Order"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "store"
                ],
                "summary": "Delete purchase order by ID",
                "description": "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors",
                "operationId": "deleteOrder",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "path",
                        "description": "ID of the order that needs to be deleted",
                        "required": true,
                        "type": "integer",
                        "minimum": 1,
                        "format": "int64"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            }
        },
        "/user": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "Create user",
                "description": "This can only be done by the logged in user.",
                "operationId": "createUser",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Created user object",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/user/createWithArray": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "Creates list of users with given input array",
                "description": "",
                "operationId": "createUsersWithArrayInput",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "List of user object",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/User"
                            }
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/user/createWithList": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "Creates list of users with given input array",
                "description": "",
                "operationId": "createUsersWithListInput",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "List of user object",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/User"
                            }
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/user/login": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Logs user into the system",
                "description": "",
                "operationId": "loginUser",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "username",
                        "in": "query",
                        "description": "The user name for login",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "password",
                        "in": "query",
                        "description": "The password for login in clear text",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "string"
                        },
                        "headers": {
                            "X-Rate-Limit": {
                                "type": "integer",
                                "format": "int32",
                                "description": "calls per hour allowed by the user"
                            },
                            "X-Expires-After": {
                                "type": "string",
                                "format": "date-time",
                                "description": "date in UTC when token expires"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid username/password supplied"
                    }
                }
            }
        },
        "/user/logout": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Logs out current logged in user session",
                "description": "",
                "operationId": "logoutUser",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/user/{username}": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Get user by user name",
                "description": "",
                "operationId": "getUserByName",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "The name that needs to be fetched. Use user1 for testing. ",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Invalid username supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "user"
                ],
                "summary": "Updated user",
                "description": "This can only be done by the logged in user.",
                "operationId": "updateUser",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "name that need to be updated",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Updated user object",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid user supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "user"
                ],
                "summary": "Delete user",
                "description": "This can only be done by the logged in user.",
                "operationId": "deleteUser",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "The name that needs to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid username supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        }
    },
    "definitions": {
        "Hero": {
            "type": "object",
            "properties": {
                "idHero": {
                    "type": "integer",
                    "format": "int64"
                },
                "HeroName": {
                    "type": "string",
                    "description": "Hero name"
                },
                "image": {
                    "type": "string",
                    "description": "Hero image"
                },
                "intelligence": {
                    "type": "integer",
                    "format": "int64"
                },
                "strength": {
                    "type": "integer",
                    "format": "int64"
                },
                "speed": {
                    "type": "integer",
                    "format": "int64"
                },
                "durability": {
                    "type": "integer",
                    "format": "int64"
                },
                "power": {
                    "type": "integer",
                    "format": "int64"
                },
                "combat": {
                    "type": "integer",
                    "format": "int64"
                },
                "fullName": {
                    "type": "string",
                    "description": "Hero full name"
                },
                "placeOfBirth": {
                    "type": "string",
                    "description": "place Of Birth"
                },
                "publisher": {
                    "type": "string",
                    "description": "publisher"
                },
                "alignment": {
                    "type": "string",
                    "description": "alignment"
                },
                "firstApperance": {
                    "type": "string",
                    "description": "firstApperance"
                },
                "gender": {
                    "type": "string",
                    "description": "gender"
                },
                "race": {
                    "type": "string",
                    "description": "race"
                },
                "height": {
                    "type": "string",
                    "description": "height"
                },
                "weight": {
                    "type": "string",
                    "description": "weight"
                },
                "eyeColor": {
                    "type": "string",
                    "description": "eyeColor"
                },
                "hairColor": {
                    "type": "string",
                    "description": "hairColor"
                },
                "work": {
                    "type": "string",
                    "description": "work"
                },
                "biography": {
                    "type": "string",
                    "description": "biography"
                },
                "createDate": {
                    "type": "string",
                    "format": "date-time"
                }
            }
        },
        "userHero": {
            "type": "object",
            "properties": {
                "idUsu": {
                    "type": "integer",
                    "format": "int64"
                },
                "idHero": {
                    "type": "integer",
                    "format": "int64"
                },
                "score": {
                    "type": "integer",
                    "format": "int64"
                },
                "comment": {
                    "type": "string"
                },
                "favorite": {
                    "type": "integer",
                    "format": "int64"
                },
                "follow": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "User": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "username": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "userStatus": {
                    "type": "integer",
                    "format": "int32",
                    "description": "User Status"
                }
            },
            "xml": {
                "name": "User"
            }
        },
        "Tag": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "name": {
                    "type": "string"
                }
            },
            "xml": {
                "name": "Tag"
            }
        },
        "Pet": {
            "type": "object",
            "required": [
                "name",
                "photoUrls"
            ],
            "properties": {
                "id": {
                    "type": "integer",
                    "format": "int64"
                },
                "category": {
                    "$ref": "#/definitions/Category"
                },
                "name": {
                    "type": "string",
                    "example": "doggie"
                },
                "photoUrls": {
                    "type": "array",
                    "xml": {
                        "name": "photoUrl",
                        "wrapped": true
                    },
                    "items": {
                        "type": "string"
                    }
                },
                "tags": {
                    "type": "array",
                    "xml": {
                        "name": "tag",
                        "wrapped": true
                    },
                    "items": {
                        "$ref": "#/definitions/Tag"
                    }
                },
                "status": {
                    "type": "string",
                    "description": "pet status in the store",
                    "enum": [
                        "available",
                        "pending",
                        "sold"
                    ]
                }
            },
            "xml": {
                "name": "Pet"
            }
        },
        "ApiResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "format": "int32"
                },
                "type": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        }
    }
}